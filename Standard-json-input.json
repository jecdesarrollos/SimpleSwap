{"language":"Solidity","settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"outputSelection":{"*":{"":["ast"],"*":["abi","metadata","devdoc","userdoc","storageLayout","evm.legacyAssembly","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","evm.gasEstimates","evm.assembly"]}},"remappings":[]},"sources":{"SimpleSwap_flattened.sol":{"content":"\n// SPDX-License-Identifier: MIT\n// File: @openzeppelin/contracts/utils/Context.sol\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/interfaces/IERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/interfaces/IERC165.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n\n// File: @openzeppelin/contracts/interfaces/IERC1363.sol\n\n\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\n\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n\n// File: ISimpleSwap.sol\n\n\npragma solidity ^0.8.27;\n\n/// @title Interface for SimpleSwap\n/// @notice SwapVerifier interface to ensure compatibility\ninterface ISimpleSwap {\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function getPrice(address tokenA, address tokenB)\n        external\n        view\n        returns (uint256 price);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external view returns (uint256);\n}\n// File: Math.sol\n\n\npragma solidity ^0.8.27;\n\n/// @title Mathematical Utilities\n/// @author Based on the implementation from Uniswap V2 / Solmate\n/// @notice Provides safe and gas-efficient math functions, such as this integer square root calculation.\nlibrary Math {\n    /**\n     * @notice Calculates the integer square root of a number `y`.\n     * @dev Uses the Babylonian method (or Heron's method) to find the square root iteratively.\n     * The result is truncated, meaning any fractional part is discarded. For example, sqrt(10) will return 3.\n     * This implementation is gas-efficient and safe against overflows for uint256 values.\n     * @param y The number for which to calculate the square root.\n     * @return z The integer square root of `y`.\n     */\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n// File: SimpleSwap.sol\n\n\npragma solidity ^0.8.27;\n\n\n\n\n\n/// @title SimpleSwap\n/// @author Jorge Enrique Cabrera\n/// @notice A self-contained Uniswap V2-style Automated Market Maker contract.\ncontract SimpleSwap is Ownable, ISimpleSwap {\n    using SafeERC20 for IERC20;\n\n    // =============================================================\n    //                      STATE & CONSTANTS\n    // =============================================================\n\n    /// @notice The name of the Liquidity Provider (LP) token.\n    string public constant name = \"SimpleSwap LPToken\";\n    /// @notice The symbol of the Liquidity Provider (LP) token.\n    string public constant symbol = \"LPT\";\n    /// @notice The decimals of the Liquidity Provider (LP) token.\n    uint8 public constant decimals = 18;\n    /// @notice The total supply of LP tokens.\n    uint256 public totalSupply;\n    \n    /// @notice A mapping from an account to its LP token balance.\n    mapping(address => uint256) public balanceOf;\n    /// @notice A mapping from an owner to a spender to the spender's allowance.\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /// @notice The minimum amount of liquidity burned upon pool creation.\n    /// @dev This protects against initial liquidity provider price manipulation attacks.\n    uint256 public constant MINIMUM_LIQUIDITY = 1e3;\n\n    /// @notice Mapping from a sorted token pair to their reserves.\n    /// @dev Access is always via `reserves[token0][token1]` where token0 is the lower address.\n    mapping(address => mapping(address => PairReserves)) public reserves;\n\n    /// @notice Struct to hold the reserves for a token pair.\n    struct PairReserves {\n        uint256 reserveA; // Corresponds to the reserve of the token with the lower address (_token0)\n        uint256 reserveB; // Corresponds to the reserve of the token with the higher address (_token1)\n    }\n\n    // =============================================================\n    //                        CUSTOM ERRORS\n    // =============================================================\n    error SimpleSwap__IdenticalTokens();\n    error SimpleSwap__Expired();\n    error SimpleSwap__InsufficientAmountA();\n    error SimpleSwap__InsufficientAmountB();\n    error SimpleSwap__InsufficientOutputAmount();\n    error SimpleSwap__InsufficientLiquidity();\n    error SimpleSwap__InvalidLiquidity();\n    error SimpleSwap__ZeroInitialLiquidity();\n    error SimpleSwap__InvalidPath();\n    error SimpleSwap__ZeroInputAmount();\n    error SimpleSwap__NoEthToWithdraw();\n    error SimpleSwap__EthTransferFailed();\n    error SimpleSwap__NoTokensToRecover();\n    error SimpleSwap__InsufficientBalance();\n    error SimpleSwap__InsufficientAllowance();\n\n    // =============================================================\n    //                            EVENTS\n    // =============================================================\n\n    /// @notice Emitted when an approval is made.\n    /// @param owner The address which granted the approval.\n    /// @param spender The address which was approved to spend the tokens.\n    /// @param value The amount of tokens approved.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Emitted when tokens are transferred.\n    /// @param from The address from which tokens were sent.\n    /// @param to The address to which tokens were sent.\n    /// @param value The amount of tokens transferred.\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    /// @notice Emitted when liquidity is added to a pair.\n    /// @param tokenA The address of one of the tokens in the pair.\n    /// @param tokenB The address of the other token in the pair.\n    /// @param amountA The amount of tokenA added.\n    /// @param amountB The amount of tokenB added.\n    /// @param liquidity The amount of LP tokens minted.\n    event LiquidityAdded(address indexed tokenA, address indexed tokenB, uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    /// @notice Emitted when liquidity is removed from a pair.\n    /// @param tokenA The address of one of the tokens in the pair.\n    /// @param tokenB The address of the other token in the pair.\n    /// @param amountA The amount of tokenA returned.\n    /// @param amountB The amount of tokenB returned.\n    /// @param liquidity The amount of LP tokens burned.\n    event LiquidityRemoved(address indexed tokenA, address indexed tokenB, uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    /// @notice Emitted when a token swap occurs.\n    /// @param tokenIn The address of the token being sent to the pool.\n    /// @param tokenOut The address of the token being received from the pool.\n    /// @param amountIn The amount of `tokenIn` sent.\n    /// @param amountOut The amount of `tokenOut` received.\n    /// @param to The final recipient of the output tokens.\n    event Swapped(address indexed tokenIn, address indexed tokenOut, uint256 amountIn, uint256 amountOut, address indexed to);\n\n    // =============================================================\n    //                           MODIFIERS\n    // =============================================================\n\n    /// @notice The transaction is executed before the deadline.\n    /// @param deadline The timestamp by which the transaction must be executed.\n    modifier checkDeadline(uint256 deadline) {\n        if (block.timestamp > deadline) revert SimpleSwap__Expired();\n        _;\n    }\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    /// @notice Sets the initial owner of the contract.\n    /// @param initialOwner The address that will become the owner of the contract.\n    constructor(address initialOwner) Ownable(initialOwner) {}\n\n    // =============================================================\n    //                      AMM LOGIC FUNCTIONS\n    // =============================================================\n\n    /// @inheritdoc ISimpleSwap\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        override\n        checkDeadline(deadline)\n        returns (uint256 amountA, uint256 amountB, uint256 liquidity)\n    {\n        (address _token0, address _token1) = _sortTokens(tokenA, tokenB);\n        PairReserves storage pair = reserves[_token0][_token1];\n        uint256 reserve0 = pair.reserveA;\n        uint256 reserve1 = pair.reserveB;\n        uint256 currentTotalSupply = totalSupply;\n\n        if (currentTotalSupply == 0) {\n            amountA = amountADesired;\n            amountB = amountBDesired;\n        } else {\n            uint256 amountBOptimal = (amountADesired * reserve1) / reserve0;\n            if (amountBOptimal <= amountBDesired) {\n                if (amountBOptimal < amountBMin) revert SimpleSwap__InsufficientAmountB();\n                amountA = amountADesired;\n                amountB = amountBOptimal;\n            } else {\n                uint256 amountAOptimal = (amountBDesired * reserve0) / reserve1;\n                if (amountAOptimal < amountAMin) revert SimpleSwap__InsufficientAmountA();\n                amountA = amountAOptimal;\n                amountB = amountBDesired;\n            }\n        }\n        \n        if (amountA < amountAMin) revert SimpleSwap__InsufficientAmountA();\n        if (amountB < amountBMin) revert SimpleSwap__InsufficientAmountB();\n\n        IERC20(tokenA).safeTransferFrom(msg.sender, address(this), amountA);\n        IERC20(tokenB).safeTransferFrom(msg.sender, address(this), amountB);\n\n        if (currentTotalSupply == 0) {\n            liquidity = Math.sqrt(amountA * amountB);\n            if (liquidity <= MINIMUM_LIQUIDITY) revert SimpleSwap__ZeroInitialLiquidity();\n            liquidity = liquidity - MINIMUM_LIQUIDITY;\n            _mint(address(0), MINIMUM_LIQUIDITY); \n        } else {\n            uint256 liquidity0 = (amountA * currentTotalSupply) / reserve0;\n            uint256 liquidity1 = (amountB * currentTotalSupply) / reserve1;\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        }\n\n        _updateReserves(tokenA, tokenB, int256(amountA), int256(amountB));\n        _mint(to, liquidity);\n\n        emit LiquidityAdded(tokenA, tokenB, amountA, amountB, liquidity);\n    }\n\n    /// @inheritdoc ISimpleSwap\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external override checkDeadline(deadline) returns (uint256 amountA, uint256 amountB) {\n        (address _token0, address _token1) = _sortTokens(tokenA, tokenB);\n        PairReserves storage pair = reserves[_token0][_token1];\n        \n        if (liquidity == 0 || liquidity > balanceOf[msg.sender]) revert SimpleSwap__InvalidLiquidity();\n\n        uint256 currentTotalSupply = totalSupply;\n        amountA = (liquidity * pair.reserveA) / currentTotalSupply;\n        amountB = (liquidity * pair.reserveB) / currentTotalSupply;\n\n        _burn(msg.sender, liquidity);\n\n        if (tokenA != _token0) (amountA, amountB) = (amountB, amountA);\n        \n        if (amountA < amountAMin) revert SimpleSwap__InsufficientAmountA();\n        if (amountB < amountBMin) revert SimpleSwap__InsufficientAmountB();\n        \n        if (tokenA == _token0) {\n            _updateReserves(tokenA, tokenB, -int256(amountA), -int256(amountB));\n        } else {\n            _updateReserves(tokenA, tokenB, -int256(amountB), -int256(amountA));\n        }\n\n        IERC20(tokenA).safeTransfer(to, amountA);\n        IERC20(tokenB).safeTransfer(to, amountB);\n\n        emit LiquidityRemoved(tokenA, tokenB, amountA, amountB, liquidity);\n    }\n\n    /// @inheritdoc ISimpleSwap\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external override checkDeadline(deadline) {\n        if (path.length != 2) revert SimpleSwap__InvalidPath();\n        \n        address tokenIn = path[0];\n        address tokenOut = path[1];\n        \n        (uint256 reserveIn, uint256 reserveOut) = _getReservesByTokens(tokenIn, tokenOut);\n        \n        uint256 amountOut = getAmountOut(amountIn, reserveIn, reserveOut);\n        if (amountOut < amountOutMin) revert SimpleSwap__InsufficientOutputAmount();\n\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\n        \n        _updateReserves(tokenIn, tokenOut, int256(amountIn), -int256(amountOut));\n\n        IERC20(tokenOut).safeTransfer(to, amountOut);\n\n        emit Swapped(tokenIn, tokenOut, amountIn, amountOut, to);\n    }\n\n    // =============================================================\n    //                  NATIVE ERC20 IMPLEMENTATION\n    // =============================================================\n\n    /// @notice Approves a spender to use the caller's LP tokens.\n    /// @param spender The address to approve.\n    /// @param value The amount of LP tokens to approve.\n    /// @return success True if the approval was successful.\n    function approve(address spender, uint256 value) external returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /// @notice Transfers LP tokens from the caller to a recipient.\n    /// @param to The address of the recipient.\n    /// @param value The amount of LP tokens to transfer.\n    /// @return success True if the transfer was successful.\n    function transfer(address to, uint256 value) external returns (bool success) {\n        if (balanceOf[msg.sender] < value) revert SimpleSwap__InsufficientBalance();\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /// @notice Transfers LP tokens from one account to another, using the allowance mechanism.\n    /// @param from The address of the token owner.\n    /// @param to The address of the recipient.\n    /// @param value The amount of LP tokens to transfer.\n    /// @return success True if the transfer was successful.\n    function transferFrom(address from, address to, uint256 value) external returns (bool success) {\n        if (allowance[from][msg.sender] < value) revert SimpleSwap__InsufficientAllowance();\n        if (balanceOf[from] < value) revert SimpleSwap__InsufficientBalance();\n        \n        allowance[from][msg.sender] -= value;\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    // =============================================================\n    //                 VIEW & INTERNAL HELPER FUNCTIONS\n    // =============================================================\n    \n    /// @notice Internal function to mint LP tokens.\n    /// @dev Can mint to address(0) to implement the MINIMUM_LIQUIDITY burn.\n    /// @param to The address to mint the tokens to.\n    /// @param value The amount of LP tokens to mint.\n    function _mint(address to, uint256 value) internal {\n        totalSupply += value;\n        balanceOf[to] += value;\n        emit Transfer(address(0), to, value);\n    }\n\n    /// @notice Internal function to burn LP tokens.\n    /// @param from The address from which to burn the tokens.\n    /// @param value The amount of LP tokens to burn.\n    function _burn(address from, uint256 value) internal {\n        if (balanceOf[from] < value) revert SimpleSwap__InsufficientBalance();\n        totalSupply -= value;\n        balanceOf[from] -= value;\n        emit Transfer(from, address(0), value);\n    }\n    \n    /// @inheritdoc ISimpleSwap\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) public pure override returns (uint256 amountOut) {\n        if (amountIn == 0) revert SimpleSwap__ZeroInputAmount();\n        if (reserveIn == 0 || reserveOut == 0) revert SimpleSwap__InsufficientLiquidity();\n        uint256 numerator = amountIn * reserveOut;\n        uint256 denominator = reserveIn + amountIn;\n        amountOut = numerator / denominator;\n    }\n\n    /// @inheritdoc ISimpleSwap\n    function getPrice(address tokenA, address tokenB) external view override returns (uint256 price) {\n        (uint reserveA, uint reserveB) = _getReservesByTokens(tokenA, tokenB);\n        if (reserveA == 0 || reserveB == 0) revert SimpleSwap__InsufficientLiquidity();\n        price = (reserveB * 1e18) / reserveA;\n    }\n    \n    /// @notice Sorts two token addresses to ensure a canonical representation of a pair.\n    /// @dev The pair is always represented as (lower_address, higher_address).\n    /// @param tokenA The address of the first token.\n    /// @param tokenB The address of the second token.\n    /// @return token0 The token with the lower address.\n    /// @return token1 The token with the higher address.\n    function _sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        if (tokenA == tokenB) revert SimpleSwap__IdenticalTokens();\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    }\n    \n    /// @notice Gets the reserves for a token pair, returned in the same order as the input tokens.\n    /// @param tokenA The address of the first token.\n    /// @param tokenB The address of the second token.\n    /// @return reserveA The reserve corresponding to tokenA.\n    /// @return reserveB The reserve corresponding to tokenB.\n    function _getReservesByTokens(address tokenA, address tokenB) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address _token0, address _token1) = _sortTokens(tokenA, tokenB);\n        PairReserves storage pair = reserves[_token0][_token1];\n        (reserveA, reserveB) = tokenA == _token0 ? (pair.reserveA, pair.reserveB) : (pair.reserveB, pair.reserveA);\n    }\n    \n    /// @notice Updates the pair's reserves after a state-changing operation.\n    /// @dev Handles the correct assignment of amounts based on the canonical token order.\n    /// @param tokenA The first token of the operation.\n    /// @param tokenB The second token of the operation.\n    /// @param amountA The change in the amount of tokenA (can be negative).\n    /// @param amountB The change in the amount of tokenB (can be negative).\n    function _updateReserves(address tokenA, address tokenB, int256 amountA, int256 amountB) private {\n        (address _token0, address _token1) = _sortTokens(tokenA, tokenB);\n        PairReserves storage pair = reserves[_token0][_token1];\n        if (tokenA == _token0) {\n            pair.reserveA = uint256(int256(pair.reserveA) + amountA);\n            pair.reserveB = uint256(int256(pair.reserveB) + amountB);\n        } else {\n            pair.reserveA = uint256(int256(pair.reserveA) + amountB);\n            pair.reserveB = uint256(int256(pair.reserveB) + amountA);\n        }\n    }\n\n    // =============================================================\n    //                 EMERGENCY RECOVERY FUNCTIONS\n    // =============================================================\n    \n    /// @notice Allows the contract to receive Ether.\n    receive() external payable {}\n\n    /// @notice Allows the owner to withdraw any ETH accidentally sent to this contract.\n    function withdrawETH() external onlyOwner {\n        uint256 balance = address(this).balance;\n        if (balance == 0) revert SimpleSwap__NoEthToWithdraw();\n        (bool success, ) = owner().call{value: balance}(\"\");\n        if (!success) revert SimpleSwap__EthTransferFailed();\n    }\n\n    /// @notice Allows the owner to recover any arbitrary ERC20 token sent to this contract.\n    /// @param tokenAddress The address of the ERC20 token to recover.\n    function recoverERC20(address tokenAddress) external onlyOwner {\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(address(this));\n        if (tokenBalance == 0) revert SimpleSwap__NoTokensToRecover();\n        IERC20(tokenAddress).safeTransfer(owner(), tokenBalance);\n    }\n}\n"}}}